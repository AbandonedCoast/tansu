---
name: ci
on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:
    branches:
      - main
env:
  REGISTRY: ghcr.io
  CLICOLOR: 1
jobs:
  build:
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        pg:
          - postgres:16
          - postgres:17
    steps:
      - uses: actions/checkout@v4
      - run: docker compose up --detach db
        env:
          POSTGRES_IMAGE: ${{matrix.pg}}
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy, rustfmt
      - run: cargo build
      - run: cargo fmt --all --check
      - run: cargo clippy --all-targets
      - run: cargo test
  typos:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: crate-ci/typos@v1.29.5
        with:
          config: typos.toml
  package:
    needs: [build, typos]
    runs-on: ${{matrix.os}}
    permissions:
      packages: write
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/metadata-action@v5
        id: meta
        with:
          images: ${{env.REGISTRY}}/${{github.repository}}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug
      - uses: docker/login-action@v3
        with:
          registry: ${{env.REGISTRY}}
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}
      - uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  release:
    needs: [build, typos]
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            flags: '-C linker=aarch64-linux-gnu-gcc -C link-arg=-lgcc'
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            flags: ''
          - target: aarch64-apple-darwin
            os: macos-latest
            flags: ''
          - target: x86_64-apple-darwin
            os: macos-latest
            flags: ''
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - if: ${{matrix.os == 'macos-latest'}}
        run: |
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin
      - if: ${{matrix.target == 'aarch64-unknown-linux-musl'}}
        run: |
          sudo apt update
          sudo apt install -y crossbuild-essential-arm64 musl-tools zlib1g-dev
          rustup target add aarch64-unknown-linux-musl
          echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          $(which aarch64-linux-gnu-gcc) --version
      - if: ${{matrix.target == 'x86_64-unknown-linux-musl'}}
        run: |
          sudo apt update
          sudo apt install -y musl-tools zlib1g-dev
          rustup target add x86_64-unknown-linux-musl
      - env:
          RUSTFLAGS: ${{matrix.flags}}
          TARGET: ${{matrix.target}}
        run: |
          cargo build --release --target ${{matrix.target}}
          tar --create --verbose --gzip --file=tansu-${TARGET}.tar.gz -C target/${TARGET}/release tansu{-server,-proxy}
      - uses: actions/upload-artifact@v4
        with:
          name: tansu-${{matrix.target}}
          path: tansu-${{matrix.target}}.tar.gz
          if-no-files-found: error
