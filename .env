COMPOSE_FILE=compose.yaml:compose.c3.yaml:compose.sr.yaml

RUST_BACKTRACE=1
RUST_LOG=warn,tansu_server=debug,tansu_storage=debug

# Kafka cluster:
CLUSTER_ID="RvQwrYegSUCkIPkaiAZQlQ"

PULL_POLICY=missing

# When running Tansu as a container within compose.yaml use:
# Nb: SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS uses ADVERTISED_LISTENER in compose.sr.yaml
# Nb: CONTROL_CENTER_BOOTSTRAP_SERVERS uses ADVERTISED_LISTENER in compose.c3.yaml
# Nb: CONTROL_CENTER_STREAMS_CPRESTPROXY_BOOTSTRAP_SERVERS uses ADVERTISED_LISTENER in compose.c3.yaml
# ADVERTISED_LISTENER=tansu:9092

# When running Tansu with "just tansu-1" and SR/C3 running in compose use:
# ADVERTISED_LISTENER=host.docker.internal:9092

ADVERTISED_LISTENER="localhost:9092"

# create an access key for minio at:
# http://localhost:9001/access-keys
AWS_ACCESS_KEY_ID="minioadmin"
AWS_SECRET_ACCESS_KEY="minioadmin"

# use this endpoint when tansu and minio are both running in docker compose:
# AWS_ENDPOINT="http://minio:9000"

AWS_ENDPOINT="http://localhost:9000"

# enable http requests for a local minio
AWS_ALLOW_HTTP="true"

# minio storage engine
# create a bucket "tansu" at: http://localhost:9001/buckets
# or: mc mb local/tansu
STORAGE_ENGINE="s3://tansu/"

# memory storage engine
# STORAGE_ENGINE="memory://tansu/"

# use this endpoint when tansu and postgreSQL are both running in docker compose:
# STORAGE_ENGINE="postgres://postgres:postgres@db"

# STORAGE_ENGINE="postgres://postgres:postgres@localhost"
